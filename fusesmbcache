#!/usr/bin/env python

"""
This script is usually installed in (/usr/local/bin).
You should call it from a crontab every 30 minutes or so

Example:

*/30 * * * * fusesmbcache

Make sure this script is run by the same user as the user that is doing the mount.

After running this client or installing the cron script you can mount your
"Network Neighbourhood" with the command:

$ fusermount mountpoint fusesmb &

License: GPL (see COPYING)
Copyright: (C) 2003 Vincent Wagelaar
"""

import sys, os, string, popen2, signal
try:
    from sets import Set
except ImportError:
    print "Please install Python 2.3."
    print "After installing, it could be that you have to replace"
    print " \#!/usr/bin/env python with \#!/usr/bin/env python2.3"
    print "Or else run this script with:"
    print " python2.3 /usr/local/bin/fusesmbcache"
    sys.exit()
    

#Initialize alarm for failing processes
_alarm = "request timed out"

def alarm_handler(wha, bla):
    global _alarm
    signal.alarm(0)
    raise _alarm

signal.signal(signal.SIGALRM, alarm_handler)


#Why isn't Popen3 properly documented?
def getshares(wg, host, ip, share_set):
   
    if os.path.exists(os.path.expanduser( "~/.smb/credentials" )):
        run = popen2.Popen3("smbclient -A ~/.smb/credentials -I %s -L '%s'" %(ip, host))
    else:
        run = popen2.Popen3("smbclient -N -I %s -L '%s'" % (ip, host))
    #After ten seconds a client is considered dead
    signal.alarm(10)

    try:
        for line in run.fromchild.readlines():
            if line.count("Disk   "):
                line = line.split("Disk   ")[0].strip()
                if line[-1] != "$":
                    share_set.add( "/"+wg+"/"+host+"/"+line )
    except _alarm:
        os.kill(run.pid, 9)

    #Reset the alarm
    signal.alarm(0)

def gethostinfo(ip):
    wg=""
    host = ""
    fp2 = os.popen("nmblookup -A %s " % (ip, ))
    for l in fp2.readlines():
        if l.count("<00>") > 0:
            if l.count("<GROUP>") > 0:
                wg = l.split("<")[0].strip()
            else:
                if l.count("IS~") == 0:
                    host = l.split("<")[0].strip()
    fp2.close()
    if len(wg) and len(host):
        return (wg, host, ip)
    return None

#Find all workgroups
wgs = ""
fp2 = os.popen("nmblookup -M -- -")
for lin in fp2.readlines():
    if lin.count("__MSBROWSE__") > 0:
        lin = lin.split(" ")[0].strip()
        fp3 = os.popen("nmblookup -A %s" % (lin,))
        for li in fp3.readlines():
            if li.count("<00>") and li.count("<GROUP>"):
                li = li.split("<00>")[0].strip()
                wgs += " "+ li
        fp3.close()
fp2.close()

#Get all ip addresses
ip_addresses = Set()
fp = os.popen("nmblookup '*' %s" % (wgs,), "r")
for line in fp.readlines():
    #gethostinfo(line)
    if line.count("<00>") > 0:
        line = line.split(" ")[0]
        ip_addresses.add(line)

host_names = Set()
for ip in ip_addresses:
    info = gethostinfo(ip)
    if info:
        host_names.add(info)

share_set = Set()
for (wg, host, ip) in host_names:
    getshares(wg, host, ip, share_set)

cache_path = os.path.join(os.path.expanduser("~"), ".smb")
if not os.path.exists(cache_path):
   os.mkdir(cache_path)

cache_file = os.path.join(cache_path, "smbcache")

fp = open(cache_file, "w")
share_list = list(share_set)
share_list.sort()
for line in share_list:
    fp.write( line + "\n")
fp.close()
